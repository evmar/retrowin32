/* automatically generated by rust-bindgen 0.71.1 */

pub type ULONG = ::core::ffi::c_ulong;
pub type DWORD = ::core::ffi::c_ulong;
pub type BOOL = ::core::ffi::c_int;
pub type BYTE = ::core::ffi::c_uchar;
pub type WORD = ::core::ffi::c_ushort;
pub type LPBOOL = *mut BOOL;
pub type LPLONG = *mut ::core::ffi::c_long;
pub type LPDWORD = *mut DWORD;
pub type LPVOID = *mut ::core::ffi::c_void;
pub type LONG = ::core::ffi::c_long;
pub type HANDLE = *mut ::core::ffi::c_void;
pub type HRESULT = ::core::ffi::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GUID {
    pub Data1: ::core::ffi::c_ulong,
    pub Data2: ::core::ffi::c_ushort,
    pub Data3: ::core::ffi::c_ushort,
    pub Data4: [::core::ffi::c_uchar; 8usize],
}
pub type GUID = _GUID;
pub type IID = GUID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HWND__ {
    pub unused: ::core::ffi::c_int,
}
pub type HWND = *mut HWND__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HDC__ {
    pub unused: ::core::ffi::c_int,
}
pub type HDC = *mut HDC__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagRECT {
    pub left: LONG,
    pub top: LONG,
    pub right: LONG,
    pub bottom: LONG,
}
pub type RECT = tagRECT;
pub type LPRECT = *mut tagRECT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagPALETTEENTRY {
    pub peRed: BYTE,
    pub peGreen: BYTE,
    pub peBlue: BYTE,
    pub peFlags: BYTE,
}
pub type LPPALETTEENTRY = *mut tagPALETTEENTRY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RGNDATAHEADER {
    pub dwSize: DWORD,
    pub iType: DWORD,
    pub nCount: DWORD,
    pub nRgnSize: DWORD,
    pub rcBound: RECT,
}
pub type RGNDATAHEADER = _RGNDATAHEADER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RGNDATA {
    pub rdh: RGNDATAHEADER,
    pub Buffer: [::core::ffi::c_char; 1usize],
}
pub type LPRGNDATA = *mut _RGNDATA;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IUnknownVtbl {
    pub QueryInterface: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IUnknown,
            riid: *const IID,
            ppvObject: *mut *mut ::core::ffi::c_void,
        ) -> HRESULT,
    >,
    pub AddRef: ::core::option::Option<unsafe extern "stdcall" fn(This: *mut IUnknown) -> ULONG>,
    pub Release: ::core::option::Option<unsafe extern "stdcall" fn(This: *mut IUnknown) -> ULONG>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IUnknown {
    pub lpVtbl: *mut IUnknownVtbl,
}
pub type LPDIRECTDRAW = *mut IDirectDraw;
pub type LPDIRECTDRAWSURFACE = *mut IDirectDrawSurface;
pub type LPDIRECTDRAWPALETTE = *mut IDirectDrawPalette;
pub type LPDIRECTDRAWCLIPPER = *mut IDirectDrawClipper;
pub type LPDDSURFACEDESC = *mut _DDSURFACEDESC;
unsafe extern "stdcall" {
    pub fn DirectDrawCreate(
        lpGUID: *mut GUID,
        lplpDD: *mut LPDIRECTDRAW,
        pUnkOuter: *mut IUnknown,
    ) -> HRESULT;
}
pub type LPDDENUMMODESCALLBACK = ::core::option::Option<
    unsafe extern "stdcall" fn(arg1: LPDDSURFACEDESC, arg2: LPVOID) -> HRESULT,
>;
pub type LPDDENUMSURFACESCALLBACK = ::core::option::Option<
    unsafe extern "stdcall" fn(
        arg1: LPDIRECTDRAWSURFACE,
        arg2: LPDDSURFACEDESC,
        arg3: LPVOID,
    ) -> HRESULT,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DDCOLORKEY {
    pub dwColorSpaceLowValue: DWORD,
    pub dwColorSpaceHighValue: DWORD,
}
pub type DDCOLORKEY = _DDCOLORKEY;
pub type LPDDCOLORKEY = *mut DDCOLORKEY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DDBLTFX {
    pub dwSize: DWORD,
    pub dwDDFX: DWORD,
    pub dwROP: DWORD,
    pub dwDDROP: DWORD,
    pub dwRotationAngle: DWORD,
    pub dwZBufferOpCode: DWORD,
    pub dwZBufferLow: DWORD,
    pub dwZBufferHigh: DWORD,
    pub dwZBufferBaseDest: DWORD,
    pub dwZDestConstBitDepth: DWORD,
    pub __bindgen_anon_1: _DDBLTFX__bindgen_ty_1,
    pub dwZSrcConstBitDepth: DWORD,
    pub __bindgen_anon_2: _DDBLTFX__bindgen_ty_2,
    pub dwAlphaEdgeBlendBitDepth: DWORD,
    pub dwAlphaEdgeBlend: DWORD,
    pub dwReserved: DWORD,
    pub dwAlphaDestConstBitDepth: DWORD,
    pub __bindgen_anon_3: _DDBLTFX__bindgen_ty_3,
    pub dwAlphaSrcConstBitDepth: DWORD,
    pub __bindgen_anon_4: _DDBLTFX__bindgen_ty_4,
    pub __bindgen_anon_5: _DDBLTFX__bindgen_ty_5,
    pub ddckDestColorkey: DDCOLORKEY,
    pub ddckSrcColorkey: DDCOLORKEY,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _DDBLTFX__bindgen_ty_1 {
    pub dwZDestConst: DWORD,
    pub lpDDSZBufferDest: LPDIRECTDRAWSURFACE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _DDBLTFX__bindgen_ty_2 {
    pub dwZSrcConst: DWORD,
    pub lpDDSZBufferSrc: LPDIRECTDRAWSURFACE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _DDBLTFX__bindgen_ty_3 {
    pub dwAlphaDestConst: DWORD,
    pub lpDDSAlphaDest: LPDIRECTDRAWSURFACE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _DDBLTFX__bindgen_ty_4 {
    pub dwAlphaSrcConst: DWORD,
    pub lpDDSAlphaSrc: LPDIRECTDRAWSURFACE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _DDBLTFX__bindgen_ty_5 {
    pub dwFillColor: DWORD,
    pub dwFillDepth: DWORD,
    pub dwFillPixel: DWORD,
    pub lpDDSPattern: LPDIRECTDRAWSURFACE,
}
pub type DDBLTFX = _DDBLTFX;
pub type LPDDBLTFX = *mut DDBLTFX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DDSCAPS {
    pub dwCaps: DWORD,
}
pub type DDSCAPS = _DDSCAPS;
pub type LPDDSCAPS = *mut DDSCAPS;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DDSCAPS2 {
    pub dwCaps: DWORD,
    pub dwCaps2: DWORD,
    pub dwCaps3: DWORD,
    pub __bindgen_anon_1: _DDSCAPS2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _DDSCAPS2__bindgen_ty_1 {
    pub dwCaps4: DWORD,
    pub dwVolumeDepth: DWORD,
}
pub type DDSCAPS2 = _DDSCAPS2;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DDCAPS_DX7 {
    pub dwSize: DWORD,
    pub dwCaps: DWORD,
    pub dwCaps2: DWORD,
    pub dwCKeyCaps: DWORD,
    pub dwFXCaps: DWORD,
    pub dwFXAlphaCaps: DWORD,
    pub dwPalCaps: DWORD,
    pub dwSVCaps: DWORD,
    pub dwAlphaBltConstBitDepths: DWORD,
    pub dwAlphaBltPixelBitDepths: DWORD,
    pub dwAlphaBltSurfaceBitDepths: DWORD,
    pub dwAlphaOverlayConstBitDepths: DWORD,
    pub dwAlphaOverlayPixelBitDepths: DWORD,
    pub dwAlphaOverlaySurfaceBitDepths: DWORD,
    pub dwZBufferBitDepths: DWORD,
    pub dwVidMemTotal: DWORD,
    pub dwVidMemFree: DWORD,
    pub dwMaxVisibleOverlays: DWORD,
    pub dwCurrVisibleOverlays: DWORD,
    pub dwNumFourCCCodes: DWORD,
    pub dwAlignBoundarySrc: DWORD,
    pub dwAlignSizeSrc: DWORD,
    pub dwAlignBoundaryDest: DWORD,
    pub dwAlignSizeDest: DWORD,
    pub dwAlignStrideAlign: DWORD,
    pub dwRops: [DWORD; 8usize],
    pub ddsOldCaps: DDSCAPS,
    pub dwMinOverlayStretch: DWORD,
    pub dwMaxOverlayStretch: DWORD,
    pub dwMinLiveVideoStretch: DWORD,
    pub dwMaxLiveVideoStretch: DWORD,
    pub dwMinHwCodecStretch: DWORD,
    pub dwMaxHwCodecStretch: DWORD,
    pub dwReserved1: DWORD,
    pub dwReserved2: DWORD,
    pub dwReserved3: DWORD,
    pub dwSVBCaps: DWORD,
    pub dwSVBCKeyCaps: DWORD,
    pub dwSVBFXCaps: DWORD,
    pub dwSVBRops: [DWORD; 8usize],
    pub dwVSBCaps: DWORD,
    pub dwVSBCKeyCaps: DWORD,
    pub dwVSBFXCaps: DWORD,
    pub dwVSBRops: [DWORD; 8usize],
    pub dwSSBCaps: DWORD,
    pub dwSSBCKeyCaps: DWORD,
    pub dwSSBFXCaps: DWORD,
    pub dwSSBRops: [DWORD; 8usize],
    pub dwMaxVideoPorts: DWORD,
    pub dwCurrVideoPorts: DWORD,
    pub dwSVBCaps2: DWORD,
    pub dwNLVBCaps: DWORD,
    pub dwNLVBCaps2: DWORD,
    pub dwNLVBCKeyCaps: DWORD,
    pub dwNLVBFXCaps: DWORD,
    pub dwNLVBRops: [DWORD; 8usize],
    pub ddsCaps: DDSCAPS2,
}
pub type DDCAPS_DX7 = _DDCAPS_DX7;
pub type DDCAPS = DDCAPS_DX7;
pub type LPDDCAPS = *mut DDCAPS;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DDPIXELFORMAT {
    pub dwSize: DWORD,
    pub dwFlags: DWORD,
    pub dwFourCC: DWORD,
    pub __bindgen_anon_1: _DDPIXELFORMAT__bindgen_ty_1,
    pub __bindgen_anon_2: _DDPIXELFORMAT__bindgen_ty_2,
    pub __bindgen_anon_3: _DDPIXELFORMAT__bindgen_ty_3,
    pub __bindgen_anon_4: _DDPIXELFORMAT__bindgen_ty_4,
    pub __bindgen_anon_5: _DDPIXELFORMAT__bindgen_ty_5,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _DDPIXELFORMAT__bindgen_ty_1 {
    pub dwRGBBitCount: DWORD,
    pub dwYUVBitCount: DWORD,
    pub dwZBufferBitDepth: DWORD,
    pub dwAlphaBitDepth: DWORD,
    pub dwLuminanceBitCount: DWORD,
    pub dwBumpBitCount: DWORD,
    pub dwPrivateFormatBitCount: DWORD,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _DDPIXELFORMAT__bindgen_ty_2 {
    pub dwRBitMask: DWORD,
    pub dwYBitMask: DWORD,
    pub dwStencilBitDepth: DWORD,
    pub dwLuminanceBitMask: DWORD,
    pub dwBumpDuBitMask: DWORD,
    pub dwOperations: DWORD,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _DDPIXELFORMAT__bindgen_ty_3 {
    pub dwGBitMask: DWORD,
    pub dwUBitMask: DWORD,
    pub dwZBitMask: DWORD,
    pub dwBumpDvBitMask: DWORD,
    pub MultiSampleCaps: _DDPIXELFORMAT__bindgen_ty_3__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DDPIXELFORMAT__bindgen_ty_3__bindgen_ty_1 {
    pub wFlipMSTypes: WORD,
    pub wBltMSTypes: WORD,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _DDPIXELFORMAT__bindgen_ty_4 {
    pub dwBBitMask: DWORD,
    pub dwVBitMask: DWORD,
    pub dwStencilBitMask: DWORD,
    pub dwBumpLuminanceBitMask: DWORD,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _DDPIXELFORMAT__bindgen_ty_5 {
    pub dwRGBAlphaBitMask: DWORD,
    pub dwYUVAlphaBitMask: DWORD,
    pub dwLuminanceAlphaBitMask: DWORD,
    pub dwRGBZBitMask: DWORD,
    pub dwYUVZBitMask: DWORD,
}
pub type DDPIXELFORMAT = _DDPIXELFORMAT;
pub type LPDDPIXELFORMAT = *mut DDPIXELFORMAT;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DDOVERLAYFX {
    pub dwSize: DWORD,
    pub dwAlphaEdgeBlendBitDepth: DWORD,
    pub dwAlphaEdgeBlend: DWORD,
    pub dwReserved: DWORD,
    pub dwAlphaDestConstBitDepth: DWORD,
    pub __bindgen_anon_1: _DDOVERLAYFX__bindgen_ty_1,
    pub dwAlphaSrcConstBitDepth: DWORD,
    pub __bindgen_anon_2: _DDOVERLAYFX__bindgen_ty_2,
    pub dckDestColorkey: DDCOLORKEY,
    pub dckSrcColorkey: DDCOLORKEY,
    pub dwDDFX: DWORD,
    pub dwFlags: DWORD,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _DDOVERLAYFX__bindgen_ty_1 {
    pub dwAlphaDestConst: DWORD,
    pub lpDDSAlphaDest: LPDIRECTDRAWSURFACE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _DDOVERLAYFX__bindgen_ty_2 {
    pub dwAlphaSrcConst: DWORD,
    pub lpDDSAlphaSrc: LPDIRECTDRAWSURFACE,
}
pub type DDOVERLAYFX = _DDOVERLAYFX;
pub type LPDDOVERLAYFX = *mut DDOVERLAYFX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DDBLTBATCH {
    pub lprDest: LPRECT,
    pub lpDDSSrc: LPDIRECTDRAWSURFACE,
    pub lprSrc: LPRECT,
    pub dwFlags: DWORD,
    pub lpDDBltFx: LPDDBLTFX,
}
pub type DDBLTBATCH = _DDBLTBATCH;
pub type LPDDBLTBATCH = *mut DDBLTBATCH;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IDirectDraw {
    pub lpVtbl: *mut IDirectDrawVtbl,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IDirectDrawVtbl {
    pub QueryInterface: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDraw,
            riid: *const IID,
            ppvObj: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::core::option::Option<unsafe extern "stdcall" fn(This: *mut IDirectDraw) -> ULONG>,
    pub Release:
        ::core::option::Option<unsafe extern "stdcall" fn(This: *mut IDirectDraw) -> ULONG>,
    pub Compact:
        ::core::option::Option<unsafe extern "stdcall" fn(This: *mut IDirectDraw) -> HRESULT>,
    pub CreateClipper: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDraw,
            arg1: DWORD,
            arg2: *mut LPDIRECTDRAWCLIPPER,
            arg3: *mut IUnknown,
        ) -> HRESULT,
    >,
    pub CreatePalette: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDraw,
            arg1: DWORD,
            arg2: LPPALETTEENTRY,
            arg3: *mut LPDIRECTDRAWPALETTE,
            arg4: *mut IUnknown,
        ) -> HRESULT,
    >,
    pub CreateSurface: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDraw,
            arg1: LPDDSURFACEDESC,
            arg2: *mut LPDIRECTDRAWSURFACE,
            arg3: *mut IUnknown,
        ) -> HRESULT,
    >,
    pub DuplicateSurface: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDraw,
            arg1: LPDIRECTDRAWSURFACE,
            arg2: *mut LPDIRECTDRAWSURFACE,
        ) -> HRESULT,
    >,
    pub EnumDisplayModes: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDraw,
            arg1: DWORD,
            arg2: LPDDSURFACEDESC,
            arg3: LPVOID,
            arg4: LPDDENUMMODESCALLBACK,
        ) -> HRESULT,
    >,
    pub EnumSurfaces: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDraw,
            arg1: DWORD,
            arg2: LPDDSURFACEDESC,
            arg3: LPVOID,
            arg4: LPDDENUMSURFACESCALLBACK,
        ) -> HRESULT,
    >,
    pub FlipToGDISurface:
        ::core::option::Option<unsafe extern "stdcall" fn(This: *mut IDirectDraw) -> HRESULT>,
    pub GetCaps: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDraw,
            arg1: LPDDCAPS,
            arg2: LPDDCAPS,
        ) -> HRESULT,
    >,
    pub GetDisplayMode: ::core::option::Option<
        unsafe extern "stdcall" fn(This: *mut IDirectDraw, arg1: LPDDSURFACEDESC) -> HRESULT,
    >,
    pub GetFourCCCodes: ::core::option::Option<
        unsafe extern "stdcall" fn(This: *mut IDirectDraw, arg1: LPDWORD, arg2: LPDWORD) -> HRESULT,
    >,
    pub GetGDISurface: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDraw,
            arg1: *mut LPDIRECTDRAWSURFACE,
        ) -> HRESULT,
    >,
    pub GetMonitorFrequency: ::core::option::Option<
        unsafe extern "stdcall" fn(This: *mut IDirectDraw, arg1: LPDWORD) -> HRESULT,
    >,
    pub GetScanLine: ::core::option::Option<
        unsafe extern "stdcall" fn(This: *mut IDirectDraw, arg1: LPDWORD) -> HRESULT,
    >,
    pub GetVerticalBlankStatus: ::core::option::Option<
        unsafe extern "stdcall" fn(This: *mut IDirectDraw, arg1: LPBOOL) -> HRESULT,
    >,
    pub Initialize: ::core::option::Option<
        unsafe extern "stdcall" fn(This: *mut IDirectDraw, arg1: *mut GUID) -> HRESULT,
    >,
    pub RestoreDisplayMode:
        ::core::option::Option<unsafe extern "stdcall" fn(This: *mut IDirectDraw) -> HRESULT>,
    pub SetCooperativeLevel: ::core::option::Option<
        unsafe extern "stdcall" fn(This: *mut IDirectDraw, arg1: HWND, arg2: DWORD) -> HRESULT,
    >,
    pub SetDisplayMode: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDraw,
            arg1: DWORD,
            arg2: DWORD,
            arg3: DWORD,
        ) -> HRESULT,
    >,
    pub WaitForVerticalBlank: ::core::option::Option<
        unsafe extern "stdcall" fn(This: *mut IDirectDraw, arg1: DWORD, arg2: HANDLE) -> HRESULT,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IDirectDrawPalette {
    pub lpVtbl: *mut IDirectDrawPaletteVtbl,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IDirectDrawPaletteVtbl {
    pub QueryInterface: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDrawPalette,
            riid: *const IID,
            ppvObj: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef:
        ::core::option::Option<unsafe extern "stdcall" fn(This: *mut IDirectDrawPalette) -> ULONG>,
    pub Release:
        ::core::option::Option<unsafe extern "stdcall" fn(This: *mut IDirectDrawPalette) -> ULONG>,
    pub GetCaps: ::core::option::Option<
        unsafe extern "stdcall" fn(This: *mut IDirectDrawPalette, arg1: LPDWORD) -> HRESULT,
    >,
    pub GetEntries: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDrawPalette,
            arg1: DWORD,
            arg2: DWORD,
            arg3: DWORD,
            arg4: LPPALETTEENTRY,
        ) -> HRESULT,
    >,
    pub Initialize: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDrawPalette,
            arg1: LPDIRECTDRAW,
            arg2: DWORD,
            arg3: LPPALETTEENTRY,
        ) -> HRESULT,
    >,
    pub SetEntries: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDrawPalette,
            arg1: DWORD,
            arg2: DWORD,
            arg3: DWORD,
            arg4: LPPALETTEENTRY,
        ) -> HRESULT,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IDirectDrawClipper {
    pub lpVtbl: *mut IDirectDrawClipperVtbl,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IDirectDrawClipperVtbl {
    pub QueryInterface: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDrawClipper,
            riid: *const IID,
            ppvObj: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef:
        ::core::option::Option<unsafe extern "stdcall" fn(This: *mut IDirectDrawClipper) -> ULONG>,
    pub Release:
        ::core::option::Option<unsafe extern "stdcall" fn(This: *mut IDirectDrawClipper) -> ULONG>,
    pub GetClipList: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDrawClipper,
            arg1: LPRECT,
            arg2: LPRGNDATA,
            arg3: LPDWORD,
        ) -> HRESULT,
    >,
    pub GetHWnd: ::core::option::Option<
        unsafe extern "stdcall" fn(This: *mut IDirectDrawClipper, arg1: *mut HWND) -> HRESULT,
    >,
    pub Initialize: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDrawClipper,
            arg1: LPDIRECTDRAW,
            arg2: DWORD,
        ) -> HRESULT,
    >,
    pub IsClipListChanged: ::core::option::Option<
        unsafe extern "stdcall" fn(This: *mut IDirectDrawClipper, arg1: *mut BOOL) -> HRESULT,
    >,
    pub SetClipList: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDrawClipper,
            arg1: LPRGNDATA,
            arg2: DWORD,
        ) -> HRESULT,
    >,
    pub SetHWnd: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDrawClipper,
            arg1: DWORD,
            arg2: HWND,
        ) -> HRESULT,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IDirectDrawSurface {
    pub lpVtbl: *mut IDirectDrawSurfaceVtbl,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IDirectDrawSurfaceVtbl {
    pub QueryInterface: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDrawSurface,
            riid: *const IID,
            ppvObj: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef:
        ::core::option::Option<unsafe extern "stdcall" fn(This: *mut IDirectDrawSurface) -> ULONG>,
    pub Release:
        ::core::option::Option<unsafe extern "stdcall" fn(This: *mut IDirectDrawSurface) -> ULONG>,
    pub AddAttachedSurface: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDrawSurface,
            arg1: LPDIRECTDRAWSURFACE,
        ) -> HRESULT,
    >,
    pub AddOverlayDirtyRect: ::core::option::Option<
        unsafe extern "stdcall" fn(This: *mut IDirectDrawSurface, arg1: LPRECT) -> HRESULT,
    >,
    pub Blt: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDrawSurface,
            arg1: LPRECT,
            arg2: LPDIRECTDRAWSURFACE,
            arg3: LPRECT,
            arg4: DWORD,
            arg5: LPDDBLTFX,
        ) -> HRESULT,
    >,
    pub BltBatch: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDrawSurface,
            arg1: LPDDBLTBATCH,
            arg2: DWORD,
            arg3: DWORD,
        ) -> HRESULT,
    >,
    pub BltFast: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDrawSurface,
            arg1: DWORD,
            arg2: DWORD,
            arg3: LPDIRECTDRAWSURFACE,
            arg4: LPRECT,
            arg5: DWORD,
        ) -> HRESULT,
    >,
    pub DeleteAttachedSurface: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDrawSurface,
            arg1: DWORD,
            arg2: LPDIRECTDRAWSURFACE,
        ) -> HRESULT,
    >,
    pub EnumAttachedSurfaces: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDrawSurface,
            arg1: LPVOID,
            arg2: LPDDENUMSURFACESCALLBACK,
        ) -> HRESULT,
    >,
    pub EnumOverlayZOrders: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDrawSurface,
            arg1: DWORD,
            arg2: LPVOID,
            arg3: LPDDENUMSURFACESCALLBACK,
        ) -> HRESULT,
    >,
    pub Flip: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDrawSurface,
            arg1: LPDIRECTDRAWSURFACE,
            arg2: DWORD,
        ) -> HRESULT,
    >,
    pub GetAttachedSurface: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDrawSurface,
            arg1: LPDDSCAPS,
            arg2: *mut LPDIRECTDRAWSURFACE,
        ) -> HRESULT,
    >,
    pub GetBltStatus: ::core::option::Option<
        unsafe extern "stdcall" fn(This: *mut IDirectDrawSurface, arg1: DWORD) -> HRESULT,
    >,
    pub GetCaps: ::core::option::Option<
        unsafe extern "stdcall" fn(This: *mut IDirectDrawSurface, arg1: LPDDSCAPS) -> HRESULT,
    >,
    pub GetClipper: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDrawSurface,
            arg1: *mut LPDIRECTDRAWCLIPPER,
        ) -> HRESULT,
    >,
    pub GetColorKey: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDrawSurface,
            arg1: DWORD,
            arg2: LPDDCOLORKEY,
        ) -> HRESULT,
    >,
    pub GetDC: ::core::option::Option<
        unsafe extern "stdcall" fn(This: *mut IDirectDrawSurface, arg1: *mut HDC) -> HRESULT,
    >,
    pub GetFlipStatus: ::core::option::Option<
        unsafe extern "stdcall" fn(This: *mut IDirectDrawSurface, arg1: DWORD) -> HRESULT,
    >,
    pub GetOverlayPosition: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDrawSurface,
            arg1: LPLONG,
            arg2: LPLONG,
        ) -> HRESULT,
    >,
    pub GetPalette: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDrawSurface,
            arg1: *mut LPDIRECTDRAWPALETTE,
        ) -> HRESULT,
    >,
    pub GetPixelFormat: ::core::option::Option<
        unsafe extern "stdcall" fn(This: *mut IDirectDrawSurface, arg1: LPDDPIXELFORMAT) -> HRESULT,
    >,
    pub GetSurfaceDesc: ::core::option::Option<
        unsafe extern "stdcall" fn(This: *mut IDirectDrawSurface, arg1: LPDDSURFACEDESC) -> HRESULT,
    >,
    pub Initialize: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDrawSurface,
            arg1: LPDIRECTDRAW,
            arg2: LPDDSURFACEDESC,
        ) -> HRESULT,
    >,
    pub IsLost: ::core::option::Option<
        unsafe extern "stdcall" fn(This: *mut IDirectDrawSurface) -> HRESULT,
    >,
    pub Lock: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDrawSurface,
            arg1: LPRECT,
            arg2: LPDDSURFACEDESC,
            arg3: DWORD,
            arg4: HANDLE,
        ) -> HRESULT,
    >,
    pub ReleaseDC: ::core::option::Option<
        unsafe extern "stdcall" fn(This: *mut IDirectDrawSurface, arg1: HDC) -> HRESULT,
    >,
    pub Restore: ::core::option::Option<
        unsafe extern "stdcall" fn(This: *mut IDirectDrawSurface) -> HRESULT,
    >,
    pub SetClipper: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDrawSurface,
            arg1: LPDIRECTDRAWCLIPPER,
        ) -> HRESULT,
    >,
    pub SetColorKey: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDrawSurface,
            arg1: DWORD,
            arg2: LPDDCOLORKEY,
        ) -> HRESULT,
    >,
    pub SetOverlayPosition: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDrawSurface,
            arg1: LONG,
            arg2: LONG,
        ) -> HRESULT,
    >,
    pub SetPalette: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDrawSurface,
            arg1: LPDIRECTDRAWPALETTE,
        ) -> HRESULT,
    >,
    pub Unlock: ::core::option::Option<
        unsafe extern "stdcall" fn(This: *mut IDirectDrawSurface, arg1: LPVOID) -> HRESULT,
    >,
    pub UpdateOverlay: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDrawSurface,
            arg1: LPRECT,
            arg2: LPDIRECTDRAWSURFACE,
            arg3: LPRECT,
            arg4: DWORD,
            arg5: LPDDOVERLAYFX,
        ) -> HRESULT,
    >,
    pub UpdateOverlayDisplay: ::core::option::Option<
        unsafe extern "stdcall" fn(This: *mut IDirectDrawSurface, arg1: DWORD) -> HRESULT,
    >,
    pub UpdateOverlayZOrder: ::core::option::Option<
        unsafe extern "stdcall" fn(
            This: *mut IDirectDrawSurface,
            arg1: DWORD,
            arg2: LPDIRECTDRAWSURFACE,
        ) -> HRESULT,
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DDSURFACEDESC {
    pub dwSize: DWORD,
    pub dwFlags: DWORD,
    pub dwHeight: DWORD,
    pub dwWidth: DWORD,
    pub __bindgen_anon_1: _DDSURFACEDESC__bindgen_ty_1,
    pub dwBackBufferCount: DWORD,
    pub __bindgen_anon_2: _DDSURFACEDESC__bindgen_ty_2,
    pub dwAlphaBitDepth: DWORD,
    pub dwReserved: DWORD,
    pub lpSurface: LPVOID,
    pub ddckCKDestOverlay: DDCOLORKEY,
    pub ddckCKDestBlt: DDCOLORKEY,
    pub ddckCKSrcOverlay: DDCOLORKEY,
    pub ddckCKSrcBlt: DDCOLORKEY,
    pub ddpfPixelFormat: DDPIXELFORMAT,
    pub ddsCaps: DDSCAPS,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _DDSURFACEDESC__bindgen_ty_1 {
    pub lPitch: LONG,
    pub dwLinearSize: DWORD,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _DDSURFACEDESC__bindgen_ty_2 {
    pub dwMipMapCount: DWORD,
    pub dwZBufferBitDepth: DWORD,
    pub dwRefreshRate: DWORD,
}
pub type DDSURFACEDESC = _DDSURFACEDESC;
